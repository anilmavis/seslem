;;;; seslem.el
(defun vowelp (letter)
  "evaluates if letter is vowel"
  (or (equal letter 97)
      (equal letter 101)
      (equal letter 305)
      (equal letter 105)
      (equal letter 111)
      (equal letter 246)
      (equal letter 117)
      (equal letter 252)))
(defun count-syllable (word)
  "evaluates syllable count in word"
  (let ((count 0) (index 0))
    (while (< index (length word))
           (when (vowelp (aref word index))
             (setq count (1+ count)))
           (setq index (1+ index)))
    count))
(defun next-vowel (word index)
  "evaluates index of next vowel in word"
  (let ((flagp t))
    (while (and flagp (< index (length word)))
           (if (vowelp (aref word index))
               (setq flagp nil)
               (setq index (1+ index)))))
  index)
(defun spell (word)
  "evaluates syllables in word"
  (let ((syllables (make-vector (count-syllable word) "")) (index 0) (count 0))
    (while (not (equal (count-syllable (substring word index)) 1))
           (if (vowelp (aref word index))
               (progn (aset syllables count (string (aref word index)))
                 (unless (or (vowelp (aref word (1+ index))) (vowelp (aref word (+ index 2))))
                   (aset syllables count (concat (aref syllables count) (string (aref word (1+ index))))))
                 (setq index (+ index (length (aref syllables count)))))
               (let ((vowel (next-vowel word (1+ (next-vowel word index)))))
                 (unless (vowelp (aref word (1- vowel)))
                   (let ((i index))
                     (while (< i (1- vowel))
                            (aset syllables count (concat (aref syllables count) (string (aref word i))))
                            (setq i (1+ i)))
                     (setq index (+ index (length (aref syllables count))))))))
           (setq count (1+ count)))
    (aset syllables count (substring word index))
    syllables))
(spell "anil") ; ["a" "nil"]
